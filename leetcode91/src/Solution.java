class Solution {
    public int numDecodings(String s) {
        //首位为0无任何分割方式，返回0
        if (s.charAt(0) == '0') return 0;
        //以下讨论首位不为0的情况
        int n = s.length();
        if (n == 1) return 1;
        //dp[i]表示在i号位之前有多少种分法
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            //如果当前位是0，则不能和i-1拆分
            if (s.charAt(i - 1) == '0') {
                //如果前一位是1或2，则只能和前一位相同
                //例1：对于"10"，dp[2]表示2号位之前（即整个串）有多少种分法，
                //这里dp[2] = dp[1]代表2号位之前（"10|"）的分法和0号位之前（"|10"）相同（1种）
                //例2：对于"110"，dp[3]表示3号位之前（"110|"）的分法和1号位之前（"1|10"）的分法相同（1种）
                if (s.charAt(i - 2) == '1' || s.charAt(i - 2) == '2') dp[i] = dp[i - 2];
                //如果前一位是其他数字，则没有任何拆分方式，返回0
                else return 0;
            }
            //如果当前位是1,2,3,4,5,6
            else if (s.charAt(i - 1) - '0' <= 6) {
                //如果前一位是1或2，则既可以和前一位拆分，也可以不拆分
                //例3：对于"226"，dp[3]表示成（"22|6"）或（"2|26"），即dp[i] = dp[i-1] + dp[i-2]
                if (s.charAt(i - 2) == '1' || s.charAt(i - 2) == '2') dp[i] = dp[i - 1] + dp[i - 2];
                //否则只能单独拆分
                //例4：对于"236""206"，dp[3]表示成（"23|6""20|6"），即dp[i] = dp[i-1]
                else dp[i] = dp[i - 1];
            }
            //如果当前位是7,8,9
            else {
                //如果前一位是1，则既可以和前一位拆分，也可以不拆分
                //例5：对于"217"，dp[3]表示成（"21|7"）或（"2|17"）；
                if (s.charAt(i - 2) == '1') dp[i] = dp[i - 1] + dp[i - 2];
                //例6：对于"227"，dp[3]表示成（"22|7"）
                else dp[i] = dp[i - 1];
            }
        }
        return dp[n];
    }
}